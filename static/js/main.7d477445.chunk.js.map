{"version":3,"sources":["components/menu/image/logo.jpeg","components/menu/image/logo02.jpeg","serviceWorker.js","components/menu/index.jsx","components/rodape/index.jsx","pages/login/index.jsx","pages/cadastro/index.jsx","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Menu","history","useHistory","Navbar","style","backgroundColor","Brand","href","alt","src","logo","width","alignItems","Toggle","aria-controls","Collapse","id","Nav","className","Form","inline","token","localStorage","getItem","Link","color","jwt_decode","role","onClick","event","preventDefault","removeItem","pushState","Sair","renderMenu","Rodape","Col","sm","Login","useState","email","setEmail","senha","setSenha","Container","Jumbotron","Group","controlId","Label","Control","type","value","onChange","target","placeholder","class","Button","marginTop","fetch","method","body","JSON","stringify","headers","response","ok","json","alert","dados","setItem","usuario","push","err","logar","variant","Cadastro","routing","path","component","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d477445.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.aaae45df.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo02.301f87e3.jpeg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from \"react\";\r\nimport{Navbar, Nav, NavDropdown, Form, Button, FormControl, Jumbotron, Container} from 'react-bootstrap';\r\nimport './index.css';\r\nimport logo from './image/logo.jpeg'\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nconst Menu=()=> {\r\n    const history = useHistory();\r\n    const Sair =(event)=>{\r\n        event.preventDefault();\r\n        //remove token para sair do login/sessão\r\n        localStorage.removeItem('token-carango');\r\n\r\n        history.pushState('/')\r\n    }\r\n\r\n    const renderMenu = () =>{\r\n        const token = localStorage.getItem('token-carango');\r\n\r\n        if(token === null){\r\n            return(\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"mr-sm-2\">\r\n    <Form inline>\r\n      <Nav.Link href=\"/login\" style={{color : 'white'}}>Login</Nav.Link>\r\n      <Nav.Link href=\"/cadastro\" style={{color : 'white'}}>Cadastro</Nav.Link>  \r\n        \r\n   </Form> \r\n     </Nav>\r\n  </Navbar.Collapse>\r\n\r\n            );\r\n            //mudança...\r\n        }else if(jwt_decode(token).role === 'admin'){\r\n            return(\r\n         <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-sm-2\">\r\n              <Form inline>\r\n                  <Nav.Link href=\"/login\" style={{color : 'white'}}>Home</Nav.Link>\r\n                  <Nav.Link href=\"/cadastro\" style={{color : 'white'}}>Login</Nav.Link>\r\n                  <Nav.Link href=\"/sair\" onClick={event => Sair(event)} style={{color : 'white'}}>sair</Nav.Link>           \r\n               </Form> \r\n         </Nav>\r\n         </Navbar.Collapse>\r\n                \r\n            )\r\n        }else {\r\n            return(\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-sm-2\">\r\n                <Form inline>\r\n                  <Nav.Link href=\"/login\" style={{color : 'white'}}>Home</Nav.Link>\r\n                  <Nav.Link href=\"/cadastro\" style={{color : 'white'}}>Login</Nav.Link>  \r\n                    \r\n               </Form> \r\n                 </Nav>\r\n              </Navbar.Collapse>\r\n               \r\n            )\r\n\r\n        }\r\n      \r\n\r\n    }\r\n        return (\r\n         <div>\r\n        <Navbar style={{backgroundColor : 'black'}}>\r\n  <Navbar.Brand href=\"#\"></Navbar.Brand>\r\n  <img alt=\"Carongo\" src={logo} style={{ width : '150px', alignItems : 'center' }}/>\r\n\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"mr-sm-2\">\r\n    <Form inline>\r\n    {renderMenu()}\r\n   </Form> \r\n     </Nav>\r\n  </Navbar.Collapse>\r\n\r\n        </Navbar>\r\n\r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Menu;","//Suponha que seu site tenha 10 páginas com o mesmo rodapé em todos eles. Se um dia você quiser mudar o rodapé do site, você terá que mudar em todas as 10 páginas. Pra isso serve os components, para facilitar.\r\n\r\n//Importa React de react.\r\nimport React from \"react\";\r\n//Importa o css específico do index. O Global está em App.css\r\nimport \"./index.css\";\r\n\r\nimport logo from '../menu/image/logo02.jpeg'\r\n\r\n\r\nimport {Col, Row, Container} from 'react-bootstrap';\r\n\r\nconst Rodape =()=>{\r\n    return(\r\n        <div style={{backgroundColor : 'black'}}>\r\n            <container className='rodape' >\r\n                <div>\r\n                <Col sm={8}><img alt=\"Carongo\" src={logo} style={{ width : '175px'}} /></Col>\r\n                </div>\r\n\r\n                <div>\r\n                    <h1>Integrantes</h1>\r\n                    <p>João Vitor</p>\r\n                    <p>Henrique Leandro</p>\r\n                    <p>Parra</p>\r\n                    <p>Daniel</p>\r\n                    <p>Kaique</p>\r\n                    <p>Murilo</p>\r\n                    <p>Renan</p>\r\n                </div>\r\n            </container>\r\n            <div className='text-center'>\r\n                <h2>Senai de Informatica - 2021</h2>\r\n            </div>\r\n   \r\n    \r\n    \r\n  \r\n    \r\n \r\n    \r\n     \r\n  \r\n \r\n\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rodape;","import React, { useState } from 'react';\r\nimport './index.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n\r\nimport{ Jumbotron, Container, Form, Button, } from 'react-bootstrap';\r\nimport Menu from '../../components/menu';\r\nimport Rodape from '../../components/rodape';\r\n\r\n\r\n\r\nconst Login =() =>{\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState('');\r\n    const [senha, setSenha] = useState('');\r\n    \r\n    const logar=(event)=>{\r\n        event.preventDefault();\r\n        console.log(email + senha);\r\n\r\n        fetch('http://localhost:5000/conta/entrar',{\r\n            method : 'POST',\r\n            body : JSON.stringify({\r\n                email : email,\r\n                senha : senha\r\n            }),\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n           if(response.ok){\r\n               return response.json();\r\n           }\r\n           alert('dados invalidos');\r\n        })\r\n        .then(dados => {\r\n            //salva o token no localstorage\r\n            localStorage.setItem('token-carongo', dados.dados);\r\n            //decodifica o Data.token\r\n            let usuario = jwt_decode(dados.token)\r\n            console.log(usuario)\r\n            //redireciona para a ..... apos o login\r\n            history.push('/....')\r\n            \r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n\r\n    }\r\n\r\n    return(\r\n            \r\n    <div>\r\n        <Menu />\r\n    <Container className=\"container\">\r\n\r\n      <Jumbotron className='jumb'>\r\n <Form >\r\n    <Form.Group controlId=\"formBasicEmail\">\r\n    <Form.Label>Email</Form.Label>\r\n    <Form.Control type=\"email\" value={email} onChange={event=> setEmail(event.target.value)} placeholder=\"Digite seu email\" />\r\n\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"formBasicPassword\">\r\n    <Form.Label>Senha</Form.Label>\r\n    <Form.Control type=\"password\" value={senha} onChange={event=> setSenha(event.target.value)} placeholder=\"Digite sua senha\" />\r\n    </Form.Group>\r\n        <container class='accont'>\r\n            <div>\r\n            <a href=\"#esqueciminhasenha\">Esqueci minha senha</a>\r\n            </div>\r\n\r\n            <div>\r\n            <a href=\"/cadastro\">Criar conta</a>\r\n            </div>\r\n\r\n        </container>\r\n\r\n    <Button style={{marginTop : '18px'}} onClick={event => logar(event)}  className='button' variant=\"dark\" type=\"submit\">\r\n         Login\r\n    </Button>\r\n</Form>\r\n\r\n     </Jumbotron>\r\n        </Container>\r\n     <Rodape />\r\n\r\n    </div>\r\n\r\n    );\r\n    \r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport{ Jumbotron, Container, Form, Button, } from 'react-bootstrap';\r\nimport Menu from '../../components/menu';\r\nimport Rodape from '../../components/rodape';\r\n\r\nimport './index.css';\r\n\r\nconst Cadastro =()=>{\r\n    return(\r\n\r\n        <div>\r\n            <Menu />\r\n            <Container className=\"container\">\r\n\r\n                <Jumbotron className='jumb'>\r\n\r\n                <Form >\r\n                    \r\n  <Form.Group controlId=\"formBasicEmail\">\r\n    <Form.Label>Nome</Form.Label>\r\n    <Form.Control type=\"email\" placeholder=\"Digite seu nome\" />\r\n  </Form.Group>\r\n\r\n  <Form.Group controlId=\"formBasicEmail\">\r\n    <Form.Label>Email</Form.Label>\r\n    <Form.Control type=\"email\" placeholder=\"Digite seu email\" />\r\n  </Form.Group>\r\n\r\n  <Form.Group controlId=\"formBasicPassword\">\r\n    <Form.Label>Senha</Form.Label>\r\n    <Form.Control type=\"password\" placeholder=\"Digite sua senha\" />\r\n  </Form.Group>\r\n  \r\n  <Button className='button' variant=\"dark\" type=\"submit\">\r\n    Cadastrar\r\n  </Button>\r\n</Form>\r\n\r\n                </Jumbotron>\r\n            \r\n          \r\n\r\n            </Container>\r\n            <Rodape />\r\n\r\n        </div>\r\n    )\r\n}\r\n \r\n\r\nexport default Cadastro;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Login from './pages/login';\r\nimport Cadastro from './pages/cadastro';\r\nimport Home from './pages/home';\r\n\r\n\r\nconst routing = (\r\n  <Router>\r\n    <Switch>\r\n      <Route  path=\"/login\" component={Login} />\r\n      <Route  path=\"/cadastro\" component={Cadastro} />\r\n\r\n      \r\n    </Switch>\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(\r\n  routing,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}